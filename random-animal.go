package main

// DO NOT EDIT: This file was generated by vugu. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "github.com/vugu/vugu"

import "encoding/json"
import "net/http"
import "log"
import "path/filepath"

type RandomAnimalData struct {
	Animal      Animal
	ContentType string
	IsLoading   bool
	Target      string
	Url         string
}

type Animal struct {
	Url string `json:"url"`
}

func (comp *RandomAnimal) NewData(props vugu.Props) (interface{}, error) {
	ret := &RandomAnimalData{}
	ret.Target, _ = props["target"].(string)
	ret.Url, _ = props["url"].(string)
	return ret, nil
}

func (data *RandomAnimalData) HandleClick(event *vugu.DOMEvent) {
	ee := event.EventEnv()
	go func() {
		ee.Lock()
		data.IsLoading = true
		ee.UnlockRender()
		res, err := http.Get(data.Url)
		if err != nil {
			log.Printf("Error fetch()ing: %v", err)
			return
		}
		defer res.Body.Close()

		var a Animal
		err = json.NewDecoder(res.Body).Decode(&a)
		if err != nil {
			log.Printf("Error JSON decoding: %v", err)
			return
		}

		ee.Lock()
		defer ee.UnlockRender()
		data.Animal = a
		e := filepath.Ext(data.Animal.Url)
		data.ContentType = getSourceType(e)
		data.IsLoading = false
	}()
}

func getSourceType(e string) string {
	switch e {
	case ".jpeg", ".png", ".jpg", ".JPG":
		return "image"
	case ".mp4", ".gif":
		return "video"
	default:
		return "image"
	}
}

var _ vugu.ComponentType = (*RandomAnimal)(nil)

func (comp *RandomAnimal) BuildVDOM(dataI interface{}) (vdom *vugu.VGNode, css *vugu.VGNode, reterr error) {
	data := dataI.(*RandomAnimalData)
	_ = data
	_ = fmt.Sprint
	_ = reflect.Value{}
	event := vugu.DOMEventStub
	_ = event
	css = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "style", DataAtom: vugu.VGAtom(458501), Namespace: "", Attr: []vugu.VGAttribute(nil)}
	css.AppendChild(&vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    img, video {\n        width: 500px;\n        height: 500px;\n        object-fit: cover;\n        margin: 50px 0;\n    }\n    button {\n        font-size: 5em;\n        font-weight: bold;\n        padding: 10px 30px;\n        background-color: lightsalmon;\n        color: #fff;\n        border-style: none;\n    }\n    button:hover {\n        background-color: darksalmon;\n        color: #fff;\n        cursor: pointer;\n    }\n    .random-animal {\n        text-align: center;\n    }\n    .message {\n        font-size: 4em;\n    }\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)})
	var n *vugu.VGNode
	n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "random-animal"}}}
	vdom = n
	{
		parent := n
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "message"}}}
		parent.AppendChild(n)
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "どんな子がくるかな？", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		if data.IsLoading {
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Loading...", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
			}
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		if len(data.Animal.Url) > 0 {
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "div", DataAtom: vugu.VGAtom(92931), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			{
				parent := n
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				if data.ContentType == "image" {
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "img", DataAtom: vugu.VGAtom(198403), Namespace: "", Attr: []vugu.VGAttribute(nil)}
					parent.AppendChild(n)
					n.Props = vugu.Props{
						"src": data.Animal.Url,
					}
				}
				n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
				parent.AppendChild(n)
				if data.ContentType == "video" {
					n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "video", DataAtom: vugu.VGAtom(192773), Namespace: "", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "controls", Val: ""}}}
					parent.AppendChild(n)
					n.Props = vugu.Props{
						"src": data.Animal.Url,
					}
					{
						parent := n
						n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
						parent.AppendChild(n)
					}
				}
			}
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "button", DataAtom: vugu.VGAtom(102662), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
		// @click = { data.HandleClick(event) }
		{
			var i_ interface{} = data
			idat_ := reflect.ValueOf(&i_).Elem().InterfaceData()
			var i2_ interface{} = data.HandleClick
			i2dat_ := reflect.ValueOf(&i2_).Elem().InterfaceData()
			n.SetDOMEventHandler("click", vugu.DOMEventHandler{
				ReceiverAndMethodHash: uint64(idat_[0]) ^ uint64(idat_[1]) ^ uint64(i2dat_[0]) ^ uint64(i2dat_[1]),
				Method:                reflect.ValueOf(data).MethodByName("HandleClick"),
				Args:                  []interface{}{event},
			})
		}
		if false {
			// force compiler to check arguments for type safety
			data.HandleClick(event)
		}
		{
			parent := n
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "span", DataAtom: vugu.VGAtom(40708), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
			n.InnerHTML = fmt.Sprint(data.Target)
			n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "げっと\n    ", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
			parent.AppendChild(n)
		}
		n = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n", DataAtom: vugu.VGAtom(0), Namespace: "", Attr: []vugu.VGAttribute(nil)}
		parent.AppendChild(n)
	}
	return
}

type RandomAnimal struct {}

func init() { vugu.RegisterComponentType("random-animal", &RandomAnimal{}) }
